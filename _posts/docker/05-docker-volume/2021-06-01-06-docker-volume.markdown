---
layout: post
title: "Docker Volume Overview"
date: 2021-06-01T04:17:45+07:00
lang: docker
categories:
- Containerization
- DevOps
- Docker
refs: 
- https://docs.docker.com/storage/volumes/
youtube: 5L-ngkZ1D8k
comments: true
image_path: /resources/posts/docker/06h-docker-volume
gist: dimMaryanto93/d92bd18da1c73c230d7762361f738524
downloads: []
---

Volumes are the preferred mechanism for persisting data generated by and used by Docker containers. While bind mounts are dependent on the directory structure and OS of the host machine, volumes are completely managed by Docker. Volumes have several advantages over bind mounts:

1. Volumes are easier to back up or migrate than bind mounts.
2. You can manage volumes using Docker CLI commands or the Docker API.
3. Volumes work on both Linux and Windows containers.
4. Volumes can be more safely shared among multiple containers.
5. Volume drivers let you store volumes on remote hosts or cloud providers, to encrypt the  contents of volumes, or to add other functionality.
7. New volumes can have their content pre-populated by a container.
8. Volumes on Docker Desktop have much higher performance than bind mounts from Mac and Windows hosts.

In addition, volumes are often a better choice than persisting data in a container’s writable layer, because a volume does not increase the size of the containers using it, and the volume’s contents exist outside the lifecycle of a given container.

![volume](https://docs.docker.com/storage/images/types-of-mounts-volume.png)

If your container generates non-persistent state data, consider using a `tmpfs mount` to avoid storing the data anywhere permanently, and to increase the container’s performance by avoiding writing into the container’s writable layer.

If you’re running Docker on Linux, you have a third option: `tmpfs` mounts. When you create a container with a tmpfs mount, the container can create files outside the container’s writable layer.

## Choose the `-v` or `--mount` flag

In general, `--mount` is more explicit and verbose. The biggest difference is that the `-v` syntax combines all the options together in one field, while the `--mount` syntax separates them. Here is a comparison of the syntax for each flag.

1. `-v` or `--volume`: Consists of three fields, separated by colon characters (`:`). The fields must be in the correct order, and the meaning of each field is not immediately obvious.
2. `--mount`: Consists of multiple key-value pairs, separated by commas and each consisting of a `<key>=<value>` tuple. The `--mount` syntax is more verbose than `-v` or `--volume`, but the order of the keys is not significant, and the value of the flag is easier to understand.