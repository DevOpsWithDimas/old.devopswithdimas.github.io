---
layout: post
title: "Why Use Generics?"
date: 2017-11-23T09:01:37+07:00
lang: java-core
categories:
- Java
- Core
refs: 
- https://docs.oracle.com/javase/tutorial/java/generics/types.html
youtube: 6TasUzsbQ90
comments: true
downloads: []
---

Dari materi sebelumnya temen-temen ada yang bingung? tentang di materi _element collection_ kok beda cara penulisannya dengan _array_ biasa yaitu seperti berikut:

{% highlight java linenos %}
package tdi.training.java.core.data;

public class TypeOfArray {

    public static void main(String[] args){
        Integer[] intValues = new Integer[10];
        Double[] doubleValues = new Double[5];
        String[] stringValues = new String[15];
    }

}
{% endhighlight %}

Tetepi ketika menggunakan `java.util.List` ada penggunakan `<>` atau yang biasanya dinamakan dengan _diamonds_ contohnya seperti berikut:


{% highlight java linenos %}
package tdi.training.java.core.data;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

public class TypeOfListOrMap{

    public static void main(String[] args){
        List<String> listOfString = new ArrayList<>();
        List<Integer> listOfInteger = new ArrayList<>();

        Map<String, Object> mapValues = new HashMap<>();
    }
}
{% endhighlight %}

Nah pasti jadi pertanya kenapa harus menggunakan `<>` (_generics type_). Padahal dengan koding seperti ini saja sudah bisa jalan

{% highlight java linenos %}
package tdi.training.java.core.data;

import java.util.List;
import java.util.ArrayList;

public class NoGenericsTypeInList {

    public static void main(String[] args){
        List listValue = new ArrayList();

        listValue.add("Value");

        // will be need converted because the type of list is object
        String singleValue = (String) listValue.get(0);
    }
}
{% endhighlight %}

Nah coba perhatikan lagi di perintah untuk mengabil index `0`, nah disitu kita memberikan nilai ke valiable `singleValue` dengan tipe `java.lang.String` kita harus melakukan conversi tipe data, karena variable `listValue` tidak memiliki tipe data yang pasti jadi secara default nilainya bertipe `java.lang.Object` sedangkan ketika menggunakan _generic type_ kita tidak perlu melakukan conversi tipe data contohnya seperti berikut:

 {% highlight java linenos %}
package tdi.training.java.core.data;

import java.util.List;
import java.util.ArrayList;

public class GenericsTypeInList {

    public static void main(String[] args){
        List<String> listValue = new ArrayList();

        listValue.add("Value");

        // no need convert, karena udah menggunakan tipe data String
        String singleValue = listValue.get(0);
    }
}
{% endhighlight %}